{"version":3,"sources":["App.js","index.js"],"names":["App","onKeyDown","e","window","event","state","direction","keyCode","setState","moveSnake","dots","snake","head","length","push","shift","checkifoutofborders","onGameOver","checkifhit","snak","pop","forEach","body","checkifeat","scor","score","lvl","level","parseInt","food","left","top","Math","floor","random","unshift","reset","resetall","over","value","a","prompt","console","log","this","setInterval","document","onkeydown","style","color","textAlign","backgroundColor","className","padding","paddingBottom","margin","width","height","onClick","map","i","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.84fb1c6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      snake:[[0,0],[2,0]],\r\n      length:2,\r\n      score:0,\r\n      food:{\r\n        left:Math.floor((Math.random()*99)/2)*2,\r\n        top:Math.floor((Math.random()*99)/2)*2},\r\n      direction:'RIGHT',\r\n      level:0,\r\n      value:true,\r\n      over:false\r\n    }\r\n  } \r\n  componentDidMount(){\r\n    var a=prompt('Enter level: (1-10)');\r\n    console.log(a)\r\n    if(a>=1 && a<=10){\r\n      this.setState({\r\n        level:a\r\n      })\r\n      a=200-(a-1)*20;\r\n      setInterval(this.moveSnake,a);\r\n      document.onkeydown=this.onKeyDown;\r\n    }     \r\n    else{\r\n      this.setState({\r\n        value:false\r\n      })      \r\n    }\r\n  }\r\n  componentDidUpdate(){\r\n    this.checkifoutofborders();\r\n    this.checkifhit();\r\n    this.checkifeat();\r\n  }\r\n  onKeyDown=(e)=>{\r\n    e=e||window.event;\r\n    switch(this.state.direction){\r\n      case 'RIGHT':\r\n        switch(e.keyCode){\r\n          case 38:\r\n            this.setState({\r\n              direction:'UP'\r\n            });\r\n            break;\r\n          case 40:\r\n            this.setState({\r\n              direction:'DOWN'\r\n            });\r\n            break;\r\n        }\r\n        break;\r\n        case 'LEFT':\r\n          switch(e.keyCode){\r\n            case 38:\r\n              this.setState({\r\n                direction:'UP'\r\n              });\r\n              break;\r\n            case 40:\r\n              this.setState({\r\n                direction:'DOWN'\r\n              });\r\n              break;\r\n          }\r\n          break;\r\n        case 'UP':\r\n          switch(e.keyCode){\r\n            case 37:\r\n              this.setState({\r\n                direction:'LEFT'\r\n              });\r\n              break;\r\n            case 39:\r\n              this.setState({\r\n                direction:'RIGHT'\r\n              });\r\n              break;\r\n          }\r\n          break;\r\n        case 'DOWN':\r\n          switch(e.keyCode){\r\n            case 37:\r\n              this.setState({\r\n                direction:'LEFT'\r\n              });\r\n              break;\r\n            case 39:\r\n              this.setState({\r\n                direction:'RIGHT'\r\n              });\r\n              break;\r\n          }\r\n          break;\r\n    }    \r\n    \r\n  }\r\n  moveSnake=()=>{\r\n    let dots=[...this.state.snake];\r\n    let head=dots[dots.length-1];\r\n    switch(this.state.direction){\r\n      case 'RIGHT':     \r\n        head=[head[0]+2,head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head=[head[0]-2,head[1]];\r\n        break;\r\n      case 'UP':\r\n        head=[head[0],head[1]-2];\r\n        break;\r\n      case 'DOWN':\r\n        head=[head[0],head[1]+2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n          snake:dots\r\n      }\r\n    )\r\n  }\r\n  checkifoutofborders=()=>{\r\n    const head=this.state.snake[this.state.snake.length-1];\r\n    if(head[0]>=100 || head[0]<0 ||head[1]>=100 || head[1]<0)\r\n      this.onGameOver()\r\n  }\r\n  checkifhit=()=>{\r\n    const snak=[...this.state.snake];\r\n    const head=snak[snak.length-1];\r\n    snak.pop();\r\n    snak.forEach((body)=>{\r\n      if(head[0]===body[0] && head[1]===body[1])\r\n        this.onGameOver();\r\n    })\r\n  }\r\n  checkifeat=()=>{\r\n    const snak=[...this.state.snake];\r\n    let scor=this.state.score;\r\n    const lvl=this.state.level;\r\n    scor+=parseInt(lvl);\r\n    const head=snak[snak.length-1];\r\n    if(head[0]===this.state.food.left && head[1]===this.state.food.top){\r\n      this.setState({\r\n        food:{\r\n          left:Math.floor((Math.random()*99)/2)*2,\r\n          top:Math.floor((Math.random()*99)/2)*2\r\n        }\r\n      })\r\n      snak.unshift([])\r\n      this.setState({\r\n        snake:snak,\r\n        length:snak.length,\r\n        score:scor\r\n      })\r\n    }\r\n  }\r\n  reset=()=>{\r\n    this.setState({\r\n      snake:[[0,0],[2,0]]\r\n    })\r\n  }\r\n  resetall=()=>{\r\n    this.setState({\r\n      direction:'RIGHT',\r\n      snake:[[0,0],[2,0]],\r\n      length:2,\r\n      score:0,\r\n      over:false,\r\n      food:{\r\n        left:Math.floor((Math.random()*99)/2)*2,\r\n        top:Math.floor((Math.random()*99)/2)*2}\r\n    })\r\n  }\r\n  onGameOver=()=>{\r\n    this.setState({\r\n      over:true\r\n    })\r\n    this.reset();\r\n  }\r\n  render(){\r\n    if(this.state.value){\r\n      if(this.state.over){\r\n        return(\r\n          <>\r\n          <h1 style={{color:'red',textAlign:'center'}}>Welcome to Snake Xenia</h1>\r\n          <div style={{backgroundColor:'black'}}>\r\n          <div className=\"area\">\r\n            <h1 style={{textAlign:'center',padding:'15% 15% 2% 15%'}}>Game Over. Your Score is <span style={{color:'green'}}>{this.state.score}</span></h1>\r\n            <h4 style={{textAlign:'center',paddingBottom:'15%'}}>Note: To change level refresh page</h4>\r\n            <button style={{margin:'0 40%',backgroundColor:'green',textAlign:'center',color:'white', width:'20%',height:'10%'}} onClick={this.resetall}>Replay</button>\r\n          </div>\r\n          </div>\r\n          </>\r\n        )      \r\n      }\r\n      else{\r\n        return(\r\n          <>\r\n          <h1 style={{color:'red',textAlign:'center'}}>Welcome to Snake Xenia</h1>\r\n          <h2 style={{color:'green',textAlign:'center'}}>Score: <span style={{color:'red'}}>{this.state.score}</span> Level: <span style={{color:'red'}}>{this.state.level}</span></h2>\r\n          <div style={{backgroundColor:'black'}}>\r\n          <div className=\"area\">\r\n            <div className=\"snake\">\r\n              {this.state.snake.map((dots,i)=>{\r\n                const style={\r\n                  left:`${dots[0]}%`,\r\n                  top:`${dots[1]}%`\r\n                }\r\n                return(\r\n                  <div className=\"dot\" key={i} style={style}></div>\r\n                )\r\n              })}\r\n            </div>\r\n            <div className=\"food\" style={{left:`${this.state.food.left}%`,top:`${this.state.food.top}%`}}></div>\r\n          </div>\r\n          </div>\r\n          </>\r\n        )\r\n      }     \r\n    }\r\n    else{\r\n      return(\r\n        <div style={{backgroundColor:'black'}}>\r\n        <div className=\"area\">\r\n          <h1 style={{color:'red',textAlign:'center'}}>Enter the level correctly. Refresh the page to re-enter level</h1>\r\n        </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n"],"sourceRoot":""}